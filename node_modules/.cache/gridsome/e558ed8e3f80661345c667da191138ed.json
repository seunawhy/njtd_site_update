{"remainingRequest":"C:\\Users\\Oluwaseun Olowu\\Desktop\\njtd_site_update\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Oluwaseun Olowu\\Desktop\\njtd_site_update\\src\\pages\\Archive.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\Oluwaseun Olowu\\Desktop\\njtd_site_update\\src\\pages\\Archive.vue","mtime":1725521740109},{"path":"C:\\Users\\Oluwaseun Olowu\\Desktop\\njtd_site_update\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1725826210235},{"path":"C:\\Users\\Oluwaseun Olowu\\Desktop\\njtd_site_update\\node_modules\\babel-loader\\lib\\index.js","mtime":1725826212301},{"path":"C:\\Users\\Oluwaseun Olowu\\Desktop\\njtd_site_update\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1725826210235},{"path":"C:\\Users\\Oluwaseun Olowu\\Desktop\\njtd_site_update\\node_modules\\vue-loader\\lib\\index.js","mtime":1725827904240}],"contextDependencies":[],"result":["\r\nimport Issue from '~/components/Issue'\r\nimport Pagination from '~/components/Pagination'\r\n\r\nexport default {\r\n  metaInfo: {\r\n    title: 'Archives'\r\n  },\r\n\r\n  components: {\r\n    Issue,\r\n    Pagination\r\n  },\r\n\r\n  async mounted () {\r\n    this.fetchArchive()\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      loading: true,\r\n      archives: [],\r\n      pagination: {\r\n        count: 20,\r\n        offset: 0,\r\n        max: 1\r\n      }\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    item () {\r\n      return this.pagination.offset - this.count\r\n    },\r\n\r\n    items () {\r\n      return Math.floor(this.pagination.max / this.count)\r\n    },\r\n\r\n    maxItems () {\r\n      return Math.min(this.pagination.offset + this.pagination.count, this.pagination.max)\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async fetchArchive () {\r\n      try {\r\n        this.loading = true\r\n        const archives = (await this.$http.get(`/issues?offset=${this.pagination.offset}`))\r\n        this.archives = archives.items\r\n        this.pagination.max = archives.itemsMax\r\n        this.loading = false\r\n      } catch (E) {}\r\n    },\r\n\r\n    go (direction = 1) {\r\n      if (direction === -1 && this.pagination.offset === 1) return null\r\n      else if (direction === 1 && (\r\n        this.pagination.offset + this.pagination.count >= this.pagination.max\r\n      )) return null\r\n      this.pagination.offset += (direction * this.pagination.count)\r\n      this.fetchArchive()\r\n    },\r\n  }\r\n}\r\n",{"version":3,"sources":["Archive.vue"],"names":[],"mappings":";AA2BA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Archive.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n    <Layout>\r\n        <section>\r\n          <div class=\"gray-text\" v-if=\"loading\">\r\n            Loading Archives ...\r\n          </div>\r\n\r\n          <div v-else>\r\n            <div class=\"text-lg font-medium mb-8\">\r\n              Showing {{ pagination.offset + 1 }} - {{ maxItems }} of {{ pagination.max }} items\r\n            </div>\r\n            <div v-for=\"(issue) in archives\" :key=\"issue.id\" class=\"mb-3\">\r\n              <Issue :issue=\"issue\" />\r\n            </div>\r\n            <div class=\"flex justify-between items-center\">\r\n              <Pagination @previous=\"go(-1)\" @next=\"go\" />\r\n              <div>\r\n                Showing {{ pagination.offset + 1 }} - {{ maxItems }} of {{ pagination.max }} items\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n    </Layout>\r\n</template>\r\n\r\n<script>\r\nimport Issue from '~/components/Issue'\r\nimport Pagination from '~/components/Pagination'\r\n\r\nexport default {\r\n  metaInfo: {\r\n    title: 'Archives'\r\n  },\r\n\r\n  components: {\r\n    Issue,\r\n    Pagination\r\n  },\r\n\r\n  async mounted () {\r\n    this.fetchArchive()\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      loading: true,\r\n      archives: [],\r\n      pagination: {\r\n        count: 20,\r\n        offset: 0,\r\n        max: 1\r\n      }\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    item () {\r\n      return this.pagination.offset - this.count\r\n    },\r\n\r\n    items () {\r\n      return Math.floor(this.pagination.max / this.count)\r\n    },\r\n\r\n    maxItems () {\r\n      return Math.min(this.pagination.offset + this.pagination.count, this.pagination.max)\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async fetchArchive () {\r\n      try {\r\n        this.loading = true\r\n        const archives = (await this.$http.get(`/issues?offset=${this.pagination.offset}`))\r\n        this.archives = archives.items\r\n        this.pagination.max = archives.itemsMax\r\n        this.loading = false\r\n      } catch (E) {}\r\n    },\r\n\r\n    go (direction = 1) {\r\n      if (direction === -1 && this.pagination.offset === 1) return null\r\n      else if (direction === 1 && (\r\n        this.pagination.offset + this.pagination.count >= this.pagination.max\r\n      )) return null\r\n      this.pagination.offset += (direction * this.pagination.count)\r\n      this.fetchArchive()\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n</style>\r\n"]}]}