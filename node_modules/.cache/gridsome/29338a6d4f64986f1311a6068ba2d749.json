{"remainingRequest":"C:\\Users\\Oluwaseun Olowu\\Documents\\Njtd\\njtd_site_new\\node_modules\\babel-loader\\lib\\index.js??ref--1-1!C:\\Users\\Oluwaseun Olowu\\Documents\\Njtd\\njtd_site_new\\node_modules\\gridsome\\app\\fetchPath.js","dependencies":[{"path":"C:\\Users\\Oluwaseun Olowu\\Documents\\Njtd\\njtd_site_new\\node_modules\\gridsome\\app\\fetchPath.js","mtime":1725826220887},{"path":"C:\\Users\\Oluwaseun Olowu\\Documents\\Njtd\\njtd_site_new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1725826210235},{"path":"C:\\Users\\Oluwaseun Olowu\\Documents\\Njtd\\njtd_site_new\\node_modules\\babel-loader\\lib\\index.js","mtime":1725826212301}],"contextDependencies":[],"result":["import \"core-js/modules/es.error.cause.js\";\nimport fetch from './fetch';\nimport router from './router';\nimport { getResults, setResults, formatError } from './graphql/shared';\nexport default function fetchPath(path) {\n  if (process.isServer) {\n    throw new Error(`Cannot fetch ${path} while rendering HTML. ` + `This method should ony be used in the mounted hook.`);\n  }\n\n  const {\n    route\n  } = router.resolve({\n    path\n  });\n  const cached = getResults(route.path);\n  const notFoundErr = new Error(`Could not find ${path}`);\n  return new Promise((resolve, reject) => {\n    if (route.fullPath !== path) return reject(notFoundErr);\n    if (route.name === '*') return reject(notFoundErr);\n    if (cached) return resolve(cached);\n    fetch(route).then(res => {\n      if (res.code === 404) reject(notFoundErr);else resolve(setResults(route.path, res));\n    }).catch(err => {\n      if (err.code === 'MODULE_NOT_FOUND' || err.code === 404) {\n        reject(notFoundErr);\n      } else {\n        formatError(err, route);\n        reject(err);\n      }\n    });\n  });\n}",null]}