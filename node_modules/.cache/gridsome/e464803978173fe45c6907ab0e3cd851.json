{"remainingRequest":"C:\\Users\\Oluwaseun Olowu\\Documents\\Njtd\\njtd_site_new\\node_modules\\babel-loader\\lib\\index.js??ref--1-1!C:\\Users\\Oluwaseun Olowu\\Documents\\Njtd\\njtd_site_new\\node_modules\\gridsome\\app\\directives\\image.js","dependencies":[{"path":"C:\\Users\\Oluwaseun Olowu\\Documents\\Njtd\\njtd_site_new\\node_modules\\gridsome\\app\\directives\\image.js","mtime":1725826222315},{"path":"C:\\Users\\Oluwaseun Olowu\\Documents\\Njtd\\njtd_site_new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1725826210235},{"path":"C:\\Users\\Oluwaseun Olowu\\Documents\\Njtd\\njtd_site_new\\node_modules\\babel-loader\\lib\\index.js","mtime":1725826212301}],"contextDependencies":[],"result":["import caniuse from '../utils/caniuse';\nimport { addClass, removeClass } from '../utils/class';\nimport { createObserver } from '../utils/intersectionObserver';\nconst observer = caniuse.IntersectionObserver ? createObserver(intersectionHandler) : null;\nexport default {\n  inserted(el) {\n    observe(el);\n  },\n\n  update(el) {\n    observe(el);\n  },\n\n  unbind(el) {\n    unobserve(el);\n  }\n\n};\n\nfunction intersectionHandler({\n  intersectionRatio,\n  target\n}) {\n  if (intersectionRatio > 0) {\n    observer.unobserve(target);\n    loadImage(target);\n  }\n}\n\nfunction observe(el) {\n  if (el.tagName !== 'IMG') {\n    observeHtml(el);\n  } else {\n    if (!observer) loadImage(el);else observer.observe(el);\n  }\n}\n\nfunction unobserve(el) {\n  if (el.tagName !== 'IMG') {\n    unobserveHtml(el);\n  } else if (observer) {\n    observer.unobserve(el);\n  }\n}\n\nfunction observeHtml(context = document) {\n  const images = context.querySelectorAll('[data-src]');\n\n  if (observer) {\n    images.forEach(el => !el.__vue__ && observer.observe(el));\n  } else {\n    Array.from(images).forEach(el => !el.__vue__ && loadImage(el));\n  }\n}\n\nfunction unobserveHtml(context = document) {\n  if (observer) {\n    context.querySelectorAll('[data-src]').forEach(el => {\n      if (!el.__vue__) observer.unobserve(el);\n    });\n  }\n}\n\nfunction loadImage(el) {\n  const src = el.getAttribute('data-src');\n  const sizes = el.getAttribute('data-sizes');\n  const srcset = el.getAttribute('data-srcset');\n\n  if (!src || el.src.endsWith(src)) {\n    return; // src is already switched\n  }\n\n  el.onload = () => {\n    removeClass(el, 'g-image--loading');\n    addClass(el, 'g-image--loaded');\n  };\n\n  el.srcset = srcset;\n  el.sizes = sizes;\n  el.src = src;\n}",null]}